class Solution
{
    public:
    //Function to find the maximum occurring character in a string.
   /* bool sortByVal(const pair<char, int> &a, 
               const pair<char, int> &b) 
{ 
    return (a.second < b.second); 
} */
    char getMaxOccuringChar(string str)
    {
        // Your code here
        unordered_map<char,int> m;
        for(int i=0;str[i];i++)
        {
            if(m.find(str[i])==m.end())
            {
                m.insert(make_pair(str[i],1));
            }
            else
            {
                m[str[i]]++;
            }
        }
        vector<pair<char,int>> v;
        for(auto it = m.begin(); it != m.end(); it++)
            v.push_back(make_pair(it->first,it->second));
        sort(v.begin(), v.end());
        auto it = v.begin();
        int maxCount=it->second;
        char key=it->first;
        it++;
        while(it != v.end())
        {
            if(it->second > maxCount)
            {   
                maxCount=it->second;
                key=it->first;
            }
            it++;
        }
        return key; 
    }

};
